
## parsing single and double quotes

* build and free the token structure each readline, also when program exit
* unit-test the parser (quotes), debug test (displaying the test) and assert test (just ok if it is what is expected)
    * for the quote function return an int representing the number of token produced
* clean the parser to move the quote filtering in its own functions 

## signal and keys ?

* signal sigaction Ctrl-C ?
* Ctrl-D ?
* Ctrl-\ ?

Change:
ms->full_line : ms->command_line

PARSER:

parser les redirections et les tagger dans le LEXER < << >> >

EXECUTER:

commands functions to check after parser and lexer:
build_commands(ms); construire ms->command_lines (char**) separÃ© par les pipes
control des type rediriger vers des erreurs de bases comme erreur commande lorsque NO_TYPE a la place d'un BUILTIN ou EXTERNAL

TESTER:

display_commands(ms);
afficher les commands lines sous forme texte, token, ligne type par type 
ex: BUILTIN ARG_TEXT PIPE EXTERNAL PIPE NOTYPE
afficher les commands lines sous forme texte, ms->command_lines (char**)

